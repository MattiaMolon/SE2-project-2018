#metadata
swagger: '2.0'
info:
  title: "Siamo Veramente Euforici API"
  description: API description for Software Engineering II project
  version: '1.0'

#server
host: se2-project-2018.herokuapp.com
basePath: /v1
schemes:
- http

consumes:
- application/json
produces:
- application/json

#authentication token
securityDefinitions:
  ApiKeyAuth:
    type: apiKey
    in: header
    name: X-API-Key
    description: >
      You must have an API-key in order to use all the APIs.

#global security (applies to all operations):
security:
  - ApiKeyAuth: []
  
paths:
  /registration:
    post:
      summary: Registration.
      tags: [No Token]
      security: [] #no token required
      parameters:
        - in: body
          name: body
          description: Registration of a new user.
          schema:
            type: object
            properties:
              email:
                type: string
              idNumber:
                type: string
              password:
                type: string
      responses:
        200:
          description: Successful registration.
          schema:
            type: object
            properties:
              token:
                type: string
                description: Authentication token.
                example: ABCDEF123
        400:
          description: Ops! Something went wrong.
        409:
          description: We're sorry. Duplicate email.
  
  /login:
    post:
      summary: Login.
      tags: [No Token]
      security: [] #no token required
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: successfully login
        404:
          description: user or email incorrect. not found

  /users:
    get:
      summary: List all the users.
      tags: [User]
      responses:
        200:
          description: Successful response.
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No user found.

    post: 
      summary: Create a new users.
      tags: [User]
      parameters:
        - in: body
          name: User parameters
          description: The parameters necessary to create a new user.
          schema:
            type: object
            properties:
              email:
                type: string
              uniNumber:
                type: string
              password: 
                type: string
              name:
                type: string
              surname:
                type: string
      responses:
        201:
          description: The user has been created.
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
        400:
          description: Ops! Something went wrong.

    put: 
      summary: Update all user
      tags: [User]
      # aggiungere parametri 
      #parameters:
       # - in: body
        #  name: User properties
         # description: The user properties that can be modified
          #schema:
            #$ref: '#/definitions/User'
            
      responses:
        204:
          description: User updated successfully
        400:
          description: Ops! Something went wrong.
        409:
          description: Ops! It seems there are some conflicts.

    delete:
      summary: Delete all users.
      tags: [User]
      responses:
        204: 
          description: All given users has been deleted.
        400: 
          description: Ops! Something went wrong.
        
  /users/{userId}:
    get:
      summary: Returns a user by ID.
      tags: [User]
      parameters:
      - in: path
        name: userId
        description: The ID necessary to return the specified user.
        required: true
        type: integer
        minimum: 1
      responses:
        200:
          description: Successful response.
          schema:
            $ref: '#/definitions/User'
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No user found with the given ID.
    
    put: 
      summary: Update a user with the given ID
      tags: [User]
      parameters:
        - in: path
          name: userId
          description: The ID required to update the specified user.
          required: true
          type: integer
          minimum: 1
        - in: body
          name: User properties
          description: The user properties that can be modified.
          schema:
            $ref: '#/definitions/User'
      responses:
        204:
          description: User updated successfully
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No user found with the given ID.
        409:
          description: Ops! It seems there are some conflicts.
          
    delete:
      summary: Delete the user with the given ID
      tags: [User]
      parameters:
        - in: path
          name: userId
          description: The ID required to delete the specified user.
          required: true
          type: integer
          minimum: 1 
      responses:
        204:
          description: User deleted successfully
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No user found with the given ID.

  /classes:
    get:
      summary: List all the classes.
      tags: [Class]
      responses:
        200:
          description: Successful response.
          schema:
            type: array
            items:
              $ref: '#/definitions/Class'
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No class found.
    post:
      summary: Create a new class.
      tags: [Class]
      parameters:
        - in: body
          name: Class parameters
          description: Class creation
          schema:
            type: object
            properties:
              name:
                type: string
                description: the name of the class
              participants:
                type: array
                items:
                    $ref: '#/definitions/User'
                description: an array with the participants of the class
      responses:
        201:
          description: The class has been created.
          schema:
            $ref: '#/definitions/Class'
        400:
          description: Ops! Something went wrong.
    delete:
      summary: Delete all classes.
      tags: [Class]
      responses:
        204:
          description: All classes deleted.
        400:
          description: Ops! Something went wrong.

  /classes/{classId}:
    get:
      summary: Returns a class by ID.
      tags: [Class]
      parameters:
        - in: path
          name: classId
          required: true
          type: integer
          minimum: 1
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Class'
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No class found with the given ID.
    put:
      summary: Updates a class by a given ID.
      tags: [Class]
      parameters:
        - in: path
          name: classId
          required: true
          type: integer
          minimum: 1
        - in: body
          name: Class properties
          schema:
            $ref: '#/definitions/Class'
      responses:
        204:
          description: Class updated.
          schema:
            $ref: '#/definitions/Class'
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No class found with the given ID.
    
    delete:
      summary: Delete a class by a given ID.
      tags: [Class]
      parameters:
        - in: path
          name: classId
          required: true
          type: integer
          minimum: 1
      responses:
        204:
          description: Class deleted.
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No class found with the given ID.

  /tasks:
    get:
      summary: List all the tasks.
      tags: [Task]
      responses:
        200:
          description: Successful response.
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
            # da aggiungere esempio (?)
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No task found.

    post:
      summary: Create a new task.
      tags: [Task]
      parameters:
      - in: body
        name: Task parameters
        description: Task creation
        schema:
          type: object
          properties: 
            question:
              type: string
            questionType:
              type: string
              enum: [multipleChoice, openAnswer]
      responses:
        201:
          description: the task has been created.
          schema: 
            $ref: '#/definitions/Task'
        400:
          description: Ops! something went wrong.

    delete:
      summary: Delete all tasks.
      tags: [Task]
      responses:
        204:
          description: All tasks deleted.
        400:
          description: Ops! Something went wrong.

    put:
      summary: Update all tasks
      tags: [Task]
      # aggiungere parametri
      responses:
        200:
          description: Collection updated
        409:
          description: Conflict!

  /tasks/{taskId}:
    get:
      summary: Returns a task by ID.
      tags: [Task]
      parameters:
      - in: path
        name: taskId
        description: the ID required to get the specific task
        required: true
        type: integer
        minimum: 1
      responses:
        200:
          description: OK
          schema: 
            $ref: '#/definitions/Task'
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No task found with the given ID.

    put:
      summary: Update a specific task by a given ID
      tags: [Task]
      parameters:
      - in: path
        name: taskId
        description: the ID required to update the specific task
        required: true
        type: integer
        minimum: 1
      - in: body
        name: Task to update
        schema:
          $ref: '#/definitions/Task'
      responses:
        204:
          description: Task updated.
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No task found with the given ID.
        409:
          description: Conflict!

    delete:
      summary: Delete a specific task by a given ID
      tags: [Task]
      parameters:
      - in: path
        name: taskId
        description: the ID required to delete the specific task
        required: true
        type: integer
        minimum: 1
      responses: 
        204:
          description: Task deleted
        400:
          description: Ops! Something went wrong
        404:
          description: We're sorry. No Task found with the given ID.
    
  /taskGroups:
    get:
      summary: List all the task groups.
      tags: [Task Group]
      responses:
        200:
          description: Successful response.
          schema:
            type: array
            items:
              $ref: '#/definitions/TaskGroup'
            # da aggiungere esempio (?)
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No task group found.
          
    put: 
      summary: Update all task groups
      tags: [Task Group]
      #parameters:
       # - in: body
        #  name: task groups properties
         # description: Task group's properties that can be modified
          #schema:
            # aggiungere parametri 
      responses:
        204:
          description: task groups updated successfully
        400:
          description: Ops! Something went wrong.
        409:
          description: Ops! It seems there are some conflicts.

    post:
      summary: Create a new task group.
      tags: [Task Group]
      parameters:
      - in: body
        name: Task Group parameters
        description: Task Group creation
        schema:
          type: object
          properties:
            name:
              type: string
            tasks:
              type: array
              items:
                  $ref: '#/definitions/Task'
      responses:
        201:
          description: The task group has been created.
          schema:
            $ref: '#/definitions/TaskGroup'
        400:
          description: Ops! Something went wrong.

    delete:
      summary: Delete all the task groups.
      tags: [Task Group]
      responses:
        204:
          description: All task groups deleted.
        400:
          description: Ops! Something went wrong.

  /taskGroups/{taskGroupId}:
    get:
      summary: Returns a task group by ID.
      tags: [Task Group]
      parameters:
      - in: path
        name: taskGroupId
        required: true
        type: integer
        minimum: 1
      responses:
        200:
          description: OK
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No task group found with the given ID.

    put:
      summary: Updates a task group by a given ID.
      tags: [Task Group]
      parameters:
      - in: path
        name: taskGroupId
        required: true
        type: integer
        minimum: 1
      - in: body
        name: Task Group properties
        schema:
          type: object
          properties:
              name:
                type: string
              tasks:
                type: array
                items:
                  type: integer
      responses:
        204:
          description: Task Group updated.
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No task group found with the given ID.

    delete:
      summary: Delete a task group by a given ID.
      tags: [Task Group]
      parameters:
      - in: path
        name: taskGroupId
        required: true
        type: integer
        minimum: 1
      responses:
        204:
          description: Task Group deleted.
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No task group found with the given ID.
    
  /exams:
    get:
      summary: List all the exams.
      tags: [Exam]
      responses:
        200:
          description: Successful response.
          schema:
            type: array
            items:
              $ref: '#/definitions/Exam'
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No exams found.

    post:
      summary: Create an exam
      tags: [Exam]
      parameters:
        - in: body
          name: Exam params
          description: Creation of Exam
          schema:
            type: object 
            properties:
              taskgroup:
                $ref: '#/definitions/TaskGroup'
              startline:
                type: string
              deadline:
                type: string
              classes:
                type: array
                items:
                  $ref: '#/definitions/Class'
              teacher:
                  $ref: '#/definitions/User'
      responses:
        201:
          description: Exam created
          schema:
            $ref: '#/definitions/Exam'
        400:
          description: Bad Request 

    put:
      summary: Update collection of exams
      tags: [Exam]
      #parameters:
      #  - in: body
      #    name: exam properties
      #    description: Update a collection of exams
      #    schema: 
      #     $ref: "#/definitions/Exam"
      responses:
        200:
          description: OK. Exams updates successfully
        400:
          description: Bad Request 
        409:
          description: Conflict while updating

    delete:
      summary: Delete all the exams
      tags: [Exam]
      responses:
        204:
          description: Exams deleted
        400:
         description: Bad Request

  /exams/{examId}:
    get:
      summary: Returns a exam by ID.
      tags: [Exam]
      parameters:
      - in: path
        name: examId
        required: true
        type: integer
        minimum: 1
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Exam'
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No exam found with the given ID.
  
    put:  
      summary: Update a specific Exam with the given ID
      tags: [Exam]
      parameters:
      - in: path
        name: examId
        required: true
        type: integer
        minimum: 1
      - in: body
        name: Exam properties
        schema:
          type: object
          properties:
            id:
              type: integer
      responses:
        200:
          description: OK
        409:
          description: Conflict.
        400:
          description: Bad Request.
        404:
          description: We're sorry. No exam found with the given ID.

    delete:  
      summary: Delete a specific Exam with the given ID
      tags: [Exam]
      parameters:
      - in: path
        name: examId
        required: true
        type: integer
        minimum: 1
      responses:
        204:
          description: No Content. Exam deleted with success
        400:
          description: Bad Request.
        404:
          description: We're sorry. No exam found with the given ID.
  
  /submission:
    post:
      summary: Create a submission
      tags: [Submission]
      parameters:
        - in: body
          name: submission  
          description: Creation of a submission 
          schema:
            type: object
            properties:
              id:
                $ref: '#/definitions/Submission' #?????
              exam:
                $ref: '#/definitions/Exam'
      responses:
        201:
          description: Submission created
          schema:
            $ref: '#/definitions/Submission'
        400:
          description: Bad Request 

    delete:
      summary: Delete all the submissions
      tags: [Submission]
      responses:
        204:
          description: Submission deleted
        400:
          description: Bad Request
    
    get:
      summary: List all the submissions.
      tags: [Submission]
      responses:
        200:
          description: Successful response.
          schema:
            type: array
            items:
              $ref: '#/definitions/Submission'
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No submission found.
          
    put:
      summary: Update collection of submissions
      tags: [Submission]
      #parameters:
      #  - in: body
      #    name: submission properties
      #    description: Update a collection of submissions
      #    schema: 
      #     $ref: "#/definitions/SUbmission"
      responses:
        200:
          description: OK. Submission updates successfully
        400:
          description: Bad Request 
        409:
          description: Conflict while updating
   
  /submission/{submissionId}:
    get:
      summary: Returns a submission by ID.
      tags: [Submission]
      parameters:
      - in: path
        name: submissionId
        required: true
        type: integer
        minimum: 1
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Submission'
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No submission found with the given ID.
    
    put:  
      summary: Update a specific submission with the given ID
      tags: [Submission]
      parameters:
      - in: path
        name: submissionId
        required: true
        type: integer
        minimum: 1
      - in: body
        name: submission properties
        schema:
          type: object
          properties:
            id:
              type: integer
      responses:
        200:
          description: OK
        409:
          description: Conflict.
        400:
          description: Bad Request.
        404:
          description: We're sorry. No exam found with the given ID.

    delete:  
      summary: Delete a specific Submission with the given ID
      tags: [Submission]
      parameters:
      - in: path
        name: submissionId
        required: true
        type: integer
        minimum: 1
      responses:
        204:
          description: No Content. Submission deleted with success
        400:
          description: Bad Request.
        404:
          description: We're sorry. No submission found with the given ID.

  /reviews:
    get:
      summary: List of all the reviews
      tags: [Review]
      responses:
        200:
          description: Successful response.
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No review found.

    post:
      summary: Create a review.
      tags: [Review]
      parameters:
        - in: body
          name: Review params
          description: Creation of review
          schema:
            type: object 
            properties:
              id:
                type: integer
                description: the review ID
              submission:
                description: the review is referred to this submission
                $ref: '#/definitions/Submission'
              uniNumber:
                type: string
                description: the user who is performing the review
              feedback:
                type: string
                description: feedback of the reviewer
              mark:
                type: string
                description: mark written by the teacher
      responses:
        201:
          description: Review created
          schema:
            $ref: '#/definitions/Review'
        400:
          description: Bad Request 

    put:
      summary: Update collection of reviews
      tags: [Review]
      #parameters:
      #  - in: body
      #    name: exam properties
      #    description: Update a collection of exams
      #    schema: 
      #     $ref: "#/definitions/Review"
      responses:
        200:
          description: OK. Review updates successfully
        400:
          description: Bad Request 
        409:
          description: Conflict while updating

    delete:
      summary: Delete all the reviews
      tags: [Review]
      responses:
        204:
          description: Reviews deleted
        400:
         description: Bad Request

  /reviews/{reviewsId}:
    get:
      summary: Returns a review by ID.
      tags: [Review]
      parameters:
      - in: path
        name: reviewsId
        required: true
        type: integer
        minimum: 1
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Review'
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No exam found with the given ID.

    post:
      summary: Create a new review
      tags: [Review]
      deprecated: true
      parameters:
      - in: path
        name: reviewsId
        required: true
        type: integer
      responses:
        405: 
          description: Method not supported

    put:
      summary: Update a specific review with the given ID
      tags: [Review]
      parameters:
      - in: path
        name: reviewsId
        required: true
        type: integer
        minimum: 1
      - in: body
        name: Review properties
        schema:
          type: object
          properties:
            id:
              type: integer
      responses:
        200:
          description: OK
        409:
          description: Conflict.
        400:
          description: Bad Request.
        404:
          description: We're sorry. No review found with the given ID.

    delete:
      summary: Delete a specific review with the given ID
      tags: [Review]
      parameters:
      - in: path
        name: reviewsId
        required: true
        type: integer
        minimum: 1
      responses:
        204:
          description: No Content. Review deleted with success
        400:
          description: Bad Request.
        404:
          description: We're sorry. No review found with the given ID.

#global definition of common data structures we use in our API
definitions:
  User:
    title: user
    type: object
    properties:
      id:
        type: integer
        description: the user ID
        example: 22
      name:
        type: string
        description: the user's name
        example: Britney Spears
      uniNumber:
        type: string
        description: the identifier for the user provided by the university
        example: '123456'
      isTeacher:
        type: boolean
        description: >
          This value is true if the user is a teacher, false otherwise
        example: false
      email:
        type: string
        description: the user's email
        example: britney@spears.com
      examsList:
        type: array
        items:
          $ref: '#/definitions/Exam'
        example: [exam1, exam2, exam3]
    required:
    - id
    - name
    - uniNumber
    - isTeacher
    - email
  
  Class:
    title: class
    type: object
    properties:
      id:
        type: integer
        description: the class ID
        example: 4
      name:
        type: string
        description: the class' name
        example: Siamo Veramente Euforici
      participants:
        type: array
        items:
          $ref: '#/definitions/User'
        description: the collection of users taking part in a class
        example: [user1, user2, user3]
    
    required:
    - id
    - name
    - participants
    
  Task:
    title: task
    type: object
    properties:
      id:
        type: integer
        description: the task ID
        example: 5
      question:
        type: string
        description: the question
        example: "Il nome di Rovazzi, il cantante"
      questionType:
        type: string
        description: the type of question asked
        enum: [multipleChoice, openAnswer]
        example: multipleChoice
      choices:
        type: array #we give all possible answers
        items:
          type: string    
        description: >
          all the possible answers to the question, if multipleAnswers more than one 
          answer can be submitted
        example: [Fabio, Luigi, Mario, Giovanni]
      multipleAnswers:
        type: boolean
        description: >
          in case of multipleChoice, it's false when the correct answers is only one,
          true otherwise
        example: false
      teacher: 
        $ref: "#/definitions/User"
        description: the teacher who have created the task

    required:
    - id
    - question
    - questionType
    
  TaskGroup:
    title: taskgroup
    type: object
    properties: 
      id:
        type: integer
        description: the taskgroup ID
        example: 6
      numberTasks:
        type: integer
        description: the number of question selected for the exam
      tasks:
        type: array #array di task
        items:  #tipo di dato degli elementi contenuti nell'array
          $ref: "#/definitions/Task"
        description: the array of all the tasks of the exam
        
    required:
    - id
    - tasks
    
  Exam:
    title: exam
    type: object
    properties:
      id: 
        type: integer
        description: the exam ID
        example: 7
      taskgroup: 
        $ref: '#/definitions/TaskGroup'
        description: the set of all the tasks
      startline:
        type: string
        description: when the exam starts
      deadline:
        type: string
        description: the deadline for the delivery of the exam
      classes:
        type: array
        items:
          $ref: '#/definitions/Class'
        description: the specific class/classes to which the exam is assigned
      teacher:
        $ref: '#/definitions/User'
        description: the teacher who has assigned the exam to the class
       
    required:
    - id
    - taskgroup
    - deadline
    - classes

  Submission:
    title: submission
    type: object
    properties:
      class: 
        type: string
        description: class' exam
      teacher:
        $ref: '#/definitions/User'
        description: TA that assigned the exam
      student:
        $ref: '#/definitions/User'
        description: the student that sends the submission
      exam:
        $ref: '#/definitions/Exam'
      id:
        type: integer
        description: the id of the specific submission
      data:
        type: string
        description: time of submission
        
    required:
    - exam
    - id

  Review:
    title: review
    type: object
    properties:
      id:
        type: integer
        description: the review ID
      submission:
        description: the review is referred to this submission
        $ref: '#/definitions/Submission'
      uniNumber:
        type: string
        description: the user who is performing the review
      feedback:
        type: string
        description: feedback of the reviewer
      mark:
        type: string
        description: mark written by the teacher
    
    required:
    - id
    - submission
    - uniNumber