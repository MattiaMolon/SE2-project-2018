#metadata
swagger: '2.0'
info:
  title: "Siamo Veramente Euforici API"
  description: API description for Software Engineering II project
  version: '1.0'

#server
host: se2-project-2018.herokuapp.com
basePath: /v1
schemes:
- http

consumes:
- application/json
produces:
- application/json

#authentication token
securityDefinitions:
  ApiKeyAuth:
    type: apiKey
    in: header
    name: X-API-Key
    description: >
      You must have an API-key in order to use all the APIs.

#global security (applies to all operations):
security:
  - ApiKeyAuth: []

paths:
  /registration:
    post:
      summary: Registration.
      tags: [No Token]
      security: [] #no token required
      parameters:
        - in: body
          name: body
          description: Registration of a new user.
          schema:
            type: object
            properties:
              email:
                type: string
              idNumber:
                type: string
              password:
                type: string
      responses:
        201:
          description: Successful registration.
          schema:
            type: object
            properties:
              user:
                $ref: '#/definitions/User'
              token:
                type: string
                description: Authentication token.
                example: ABCDEF123
        400:
          description: Ops! Something went wrong.

  /login:
    post:
      summary: Login.
      tags: [No Token]
      security: [] #no token required
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        204:
          description: Successfully login.
        400:
          description: Ops! Something went wrong.

  /users:
    get:
      summary: List all the users.
      tags: [User]
      responses:
        200:
          description: Successful response.
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
            # da aggiungere esempio (?)
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No user found.

  /users/{userId}:
    get:
      summary: Returns a user by ID.
      tags: [User]
      parameters:
      - in: path
        name: userId
        required: true
        type: integer
        minimum: 1
      responses:
        200:
          description: OK
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No user found with the given ID.

  /classes:
    get:
      summary: List all the classes.
      tags: [Class]
      responses:
        200:
          description: Successful response.
          schema:
            type: array
            items:
              $ref: '#/definitions/Class'
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No class found.
    put:
      summary: Update all the classes.
      tags: [Class]
      # che parametri metto per la put?
      # parameters:
      #   - in: body
      #     name: Classes update
      #     description: Updates all the classe of the collection
      #     schema:
      #       $ref: '#/definitions/Class'
      responses:
        204:
          description: Classes updated.
        400:
          description: Ops! Something went wrong.
        409:
          description: Conflict!
    post:
      summary: Create a new class.
      tags: [Class]
      parameters:
        - in: body
          name: Class parameters
          description: Class creation
          schema:
            type: object
            properties:
              name:
                type: string
              participants:
                type: array
                items:
                    $ref: '#/definitions/User'
      responses:
        201:
          description: The class has been created.
          schema:
            $ref: '#/definitions/Class'
        400:
          description: Ops! Something went wrong.
    delete:
      summary: Delete all classes.
      tags: [Class]
      responses:
        204:
          description: All classes deleted.
        400:
          description: Ops! Something went wrong.

  /classes/{classId}:
    get:
      summary: Returns a class by ID.
      tags: [Class]
      parameters:
        - in: path
          name: classId
          required: true
          type: integer
          minimum: 1
      responses:
        200:
          description: OK
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No class found with the given ID.
    put:
      summary: Updates a class by a given ID.
      tags: [Class]
      parameters:
        - in: path
          name: classId
          required: true
          type: integer
          minimum: 1
        - in: body
          name: Class properties
          schema:
            $ref: '#/definitions/Class'
      responses:
        204:
          description: Class updated.
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No class found with the given ID.
    post:
      summary: Create a class with a choosen ID.
      tags: [Class]
      deprecated: true
      parameters:
        - in: path
          name: classId
          required: true
          type: integer
      responses:
        405:
            description: Method not supported.
    delete:
      summary: Delete a class by a given ID.
      tags: [Class]
      parameters:
        - in: path
          name: classId
          required: true
          type: integer
          minimum: 1
      responses:
        204:
          description: Class deleted.
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No class found with the given ID.

  /tasks:
    get:
      summary: List all the tasks.
      tags: [Task]
      responses:
        200:
          description: Successful response.
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
            # da aggiungere esempio (?)
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No task found.

  /tasks/{taskId}:
    get:
      summary: Returns a task by ID.
      tags: [Task]
      parameters:
      - in: path
        name: taskId
        required: true
        type: integer
        minimum: 1
      responses:
        200:
          description: OK
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No task found with the given ID.

  /taskGroups:
    get:
      summary: List all the task groups.
      tags: [Task Group]
      responses:
        200:
          description: Successful response.
          schema:
            type: array
            items:
              $ref: '#/definitions/TaskGroup'
            # da aggiungere esempio (?)
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No user found.

  /taskGroups/{taskGroupId}:
    get:
      summary: Returns a task group by ID.
      tags: [Task Group]
      parameters:
      - in: path
        name: taskGroupId
        required: true
        type: integer
        minimum: 1
      responses:
        200:
          description: OK
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No task group found with the given ID.

  /exams:
    get:
      summary: List all the exams.
      tags: [Exam]
      responses:
        200:
          description: Successful response.
          schema:
            type: array
            items:
              $ref: '#/definitions/Exam'
            # da aggiungere esempio (?)
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No exam found.

  /exams/{examId}:
    get:
      summary: Returns a exam by ID.
      tags: [Exam]
      parameters:
      - in: path
        name: examId
        required: true
        type: integer
        minimum: 1
      responses:
        200:
          description: OK
        400:
          description: Ops! Something went wrong.
        404:
          description: We're sorry. No exam found with the given ID.

#global definition of common data structures we use in our API
definitions:
  User:
    title: user
    type: object
    properties:
      id:
        type: integer
        description: the user ID
        example: 22
      name:
        type: string
        description: the user's name
        example: Britney Spears
      uniNumber:
        type: string
        description: the identifier for the user provided by the university
        example: '123456'
      isTeacher:
        type: boolean
        description: >
          This value is true if the user is a teacher, false otherwise
        example: false
      email:
        type: string
        description: the user's email
        example: britney@spears.com
      examsList:
        type: array
        items:
          $ref: '#/definitions/Exam'
        example: [exam1, exam2, exam3]
    required:
    - id
    - name
    - uniNumber
    - isTeacher
    - email

  Class:
    title: class
    type: object
    properties:
      id:
        type: integer
        description: the class ID
        example: 4
      name:
        type: string
        description: the class' name
        example: Siamo Veramente Euforici
      participants:
        type: array
        items:
          $ref: '#/definitions/User'
        description: the collection of users taking part in a class
        example: [user1, user2, user3]

    required:
    - id
    - name
    - participants

  Task:
    title: task
    type: object
    properties:
      id:
        type: integer
        description: the task ID
        example: 5
      question:
        type: string
        description: the question
        example: "Il nome di Rovazzi, il cantante"
      questionType:
        type: string
        enum: [multipleChoice, openAnswer]
        example: multipleChoice
      choices:
        type: array #we give all possible answers
        items:
          type: string
        description: >
          in case of multipleChoice task, all the possible answers
        example: [Fabio, Luigi, Mario, Giovanni]
      multipleAnswers:
        type: boolean
        description: >
          in case of multipleChoice, it's false when the correct answers is only one,
          true otherwise
        example: false
      teacher:
        $ref: "#/definitions/User"
        description: the teacher who have created the task

    required:
    - id
    - question
    - questionType

  TaskGroup:
    title: taskgroup
    type: object
    properties:
      id:
        type: integer
        description: the taskgroup ID
        example: 6
      numberTasks:
        type: integer
        description: the number of question selected for the exam
      tasks:
        type: array #array di task
        items:  #tipo di dato degli elementi contenuti nell'array
          $ref: "#/definitions/Task"
        description: the array of all the tasks of the exam

    required:
    - id
    - tasks

  Exam:
    title: exam
    type: object
    properties:
      id:
        type: integer
        description: the exam ID
        example: 7
      taskgroup:
        $ref: "#/definitions/TaskGroup"
        description: the set of all the tasks
      startline:
        type: string
        description: when the exam starts
      deadline:
        type: string
        description: the deadline for the delivery of the exam
      classes:
        type: array
        items:
          $ref: "#/definitions/User"
        description: the specific class/classes to which the exam is assigned
      teacher:
        $ref: "#/definitions/User"
        description: the teacher who has assigned the exam to the class

    required:
    - id
    - taskgroup
    - deadline
    - classes